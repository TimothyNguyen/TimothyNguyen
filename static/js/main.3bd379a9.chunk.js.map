{"version":3,"sources":["logo.svg","components/Footer.js","components/Hero.js","pages/HomePage.js","pages/AboutPage.js","pages/ContactPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","className","Container","fluid","Row","Col","md","sm","Hero","props","Jumbotron","title","subTitle","text","HomePage","AboutPage","ContactPage","App","state","headerLinks","path","home","subtitle","about","contact","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","to","exact","render","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3bd379a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className={\"mt-5\"}>\r\n            <Container fluid={true}>\r\n                <Row className=\"border-top justify-content-between p-3\">\r\n                    <Col className=\"p-0\" md={3} sm={12}>\r\n                        Timothy Nguyen\r\n                    </Col>\r\n                    <Col className=\"p-0 d-flex justify-content-end\" md={3}>\r\n                        This site was made by Timothy Nguyen.\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </footer>\r\n    );\r\n}\r\nexport default Footer;","/*\r\n* On the web the hero section is typically a prominent image, slider,\r\n* text or similar element that has pride of place at the top of your\r\n* homepage layout and possibly subsequent pages. It is front and\r\n* center and in your face.\r\n*/\r\n\r\nimport React from \"react\";\r\nimport {Jumbotron, Container, Row, Col} from 'react-bootstrap';\r\n\r\nfunction Hero(props) {\r\n    return(\r\n        <Jumbotron className=\"bg-transparent jumbotron-fluid p-0\">\r\n            <Container fluid={true}>\r\n                <Row className=\"justify-content-center py-5\">\r\n                    <Col md={8} sm={12}>\r\n                        { props.title && <h1 className=\"display-1 font-weight-bolder\">{props.title}</h1> }\r\n                        { props.subTitle && <h3 className=\"display-4 font-weight-light\">{props.subTitle}</h3> }\r\n                        { props.text && <h3 className=\"lead font-weight-light\">{props.text}</h3> }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </Jumbotron>\r\n    );\r\n}\r\n\r\nexport default Hero;","import React from 'react';\r\n\r\nimport Hero from '../components/Hero';\r\n\r\nfunction HomePage(props) {\r\n\r\n    return(\r\n        <div>\r\n            <Hero title={props.title} subTitle={props.subTitle} text={props.text} />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default HomePage;","import React from \"react\";\r\n\r\nfunction AboutPage(props){\r\n    return(\r\n        <p>About Page</p>\r\n    );\r\n}\r\n\r\nexport default AboutPage;","import React from \"react\";\r\n\r\nfunction ContactPage(props){\r\n    return(\r\n        <p>Contact Page</p>\r\n    );\r\n}\r\n\r\nexport default ContactPage;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container } from 'react-bootstrap';\r\n\r\nimport Footer from './components/Footer';\r\nimport HomePage from './pages/HomePage';\r\nimport AboutPage from './pages/AboutPage';\r\nimport ContactPage from './pages/ContactPage';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: 'Timothy Nguyen',\r\n            headerLinks: [\r\n                { title: 'Home', path: '/'},\r\n                { title: 'About', path: '/about' },\r\n                { title: 'Contact', path: '/contact' }\r\n            ],\r\n            home: {\r\n                title: 'Welcome!',\r\n                subtitle: 'Projects are listed here',\r\n                text: 'Check on what I\\'m doing'\r\n            },\r\n            about: {\r\n                title: 'About Me'\r\n            },\r\n            contact: {\r\n                title: 'Contact me!'\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Container className=\"p-0\" fluid={true}>\r\n\r\n                    <Navbar className=\"border-bottom\" bg=\"transparent\" expand=\"lg\">\r\n                        <Navbar.Brand>Timothy Nguyen</Navbar.Brand>\r\n\r\n                        <Navbar.Toggle className=\"border-0\" aria-controls=\"navbar-toggle\" />\r\n                        <Navbar.Collapse id=\"navbar-toggle\">\r\n                            <Nav className=\"ml-auto\">\r\n                                <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n                                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                                <Link className=\"nav-link\" to=\"/contact\">Contact</Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Navbar>\r\n\r\n                    <Route path=\"/\" exact render={() => <HomePage title={this.state.home.title} subTitle={this.state.home.subTitle} text={this.state.home.text} />} />\r\n                    <Route path=\"/about\" render={() => <AboutPage title={this.state.about.title} />} />\r\n                    <Route path=\"/contact\" render={() => <ContactPage title={this.state.contact.title} />} />\r\n\r\n                    <Footer />\r\n                </Container>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}